#!/usr/bin/env python3

"""
Wraps the osm2pgsql instance for docker usage.

This tool handles the usage of the pbf file and
runs periodic updates using the defined replication endpoint.

See the help of the 'start' command for more information on
how to use %(prog)s.
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
import logging
import sys
import subprocess
import time
import traceback
from os import environ

LOG = logging.getLogger()

def start(args):
    replicationStatus = run_replication_cmd(args, "ready", ())

    if (replicationStatus == 1):
        LOG.info("Initializing replication status")
        run_replication_cmd(args, "init", (
            "--osm-file", args.osm_file,
            "--server", args.replication_url
        ))

        LOG.info("Performing first import of " + args.osm_file)
        if (osm2pgsql_import_cmd(args) > 0):
            LOG.error("Could not import")
    elif (replicationStatus != 0):
        LOG.error("The current replication status could not be retrieved")
        return 1
        
    LOG.info("The replication state is initalized")
    LOG.info("Starting replication")

    replication_args = []
    replication_args.extend('--max-diff-size', args.max_diff_size)
    replication_args.extend('--osm2pgsql-cmd', args.osm2pgsql_cmd)
    replication_args.append('--')
    replication_args.extend(args.extra_params)

    while True:
        run_replication_cmd(args, 'update', replication_args)
        time.sleep(60)

def run_replication_cmd(args, action, replication_args):
    replication = [args.replication_cmd, action]
    if args.prefix:
        replication.extend(('--prefix', args.prefix))
    if args.database:
        replication.extend(('--database', args.database))
    if args.username:
        replication.extend(('--username', args.username))
    if args.host:
        replication.extend(('--host', args.host))
    if args.port:
        replication.extend(('--port', args.port))
        
    replication.extend(replication_args)

    LOG.debug("Calling replication with: %s", ' '.join(replication))

    if args.dry_run == true:
        return 0
    else:
        replicationProcess = subprocess.run(replication)
        return replicationProcess.returncode

def osm2pgsql_import_cmd(args):
    osm2pgsql = [args.osm2pgsql_cmd, '--create', '--slim', '--prefix', args.prefix]
    if args.database:
        osm2pgsql.extend(('-d', args.database))
    if args.username:
        osm2pgsql.extend(('-U', args.username))
    if args.host:
        osm2pgsql.extend(('-H', args.host))
    if args.port:
        osm2pgsql.extend(('-P', args.port))
    
    osm2pgsql.extend(args.extra_params)
    osm2pgsql.append(args.osm_file)
    LOG.debug("Calling osm2pgsql with: %s", ' '.join(osm2pgsql))

    if args.dry_run == true:
        return 0
    else:
        osm2pgsqlProcess = subprocess.run(osm2pgsql)
        return osm2pgsqlProcess.returncode

def process_env(args):
    envMappings = {
        "OSM_FILE": "osm_file",
        "REPLICATION_URL": "replication_url",
        "REPLICATION_CMD": "replication_cmd",
        "POSTGRES_USER": "username",
        "POSTGRES_PASSWORD": "password",
        "POSTGRES_DB": "database",
        "POSTGRES_HOST": "host",
        "POSTGRES_PREFIX": "prefix"
    }

    for envVar in envMappings:
        if environ.get(envVar) is not None:
            setattr(args, envMappings[envVar], environ.get(envVar))

    return args

def get_parser():
    parser = ArgumentParser(description=__doc__,
                            prog='osm2pgsql-docker',
                            formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument('--dry-run', action='store_true',
                     help='Does not actually execute the commands')

    # TODO: Implement those also via environment variables and hand them through
    group = parser.add_argument_group('Logging arguments')
    group.add_argument('-q', '--quiet', action='store_const', const=0,
                       dest='verbose', default=2,
                       help='Print only error messages')
    group.add_argument('-v', '--verbose', action='count', default=2,
                       help='Increase verboseness of output')

    group = parser.add_argument_group('Source arguments')
    group.add_argument('--osm-file', metavar='FILE',
                       help='File to load initially using osm2pgsql.')
    group.add_argument('--replication-url', metavar='URL',
                       default='https://planet.openstreetmap.org/replication/minute',
                       help='Use replication server at the given URL (default: %(default)s)')

    group = parser.add_argument_group('Database arguments')
    group.add_argument('--database', metavar='DB',
                       help='Name of PostgreSQL database to connect to or conninfo string')
    group.add_argument('--username', metavar='NAME',
                       help='PostgreSQL user name')
    group.add_argument('--host', metavar='HOST',
                       help='Database server host name or socket location')
    group.add_argument('--port', metavar='PORT',
                       help='Database server port')
    group.add_argument('--prefix', metavar='PREFIX', default='planet_osm',
                       help="Prefix for table names (default 'planet_osm')")

    group = parser.add_argument_group('Update arguments')
    group.add_argument('--max-diff-size', type=int, default=500,
                     help='Maximum data to load in MB (default: 500MB)')
    group.add_argument('--replication-cmd', default='/scripts/osm2pgsql-replication',
                     help='Path to osm2pgsql-replication command (default: /scripts/osm2pgsql-replication)')
    group.add_argument('--osm2pgsql-cmd', default='osm2pgsql',
                     help='Path to osm2pgsql command (default: osm2pgsql)')

    # TODO: Implement those also via environment variables and hand them through
    parser.add_argument('extra_params', nargs='*', metavar='param',
                     help='Extra parameters to hand in to osm2pgsql.')

    return parser

def main():
    parser = get_parser()
    args = parser.parse_args()

    args = process_env(args)

    logging.basicConfig(stream=sys.stderr,
                        format='{asctime} [{levelname}]: {message}',
                        style='{',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=max(4 - args.verbose, 1) * 10)

    if '"' in args.prefix:
        LOG.fatal("Prefix must not contain quotation marks.")
        return 1

    return start(args)


if __name__ == '__main__':
    exit(main())
